

class Student implements Comparable<Student>{
    private String name;
    private int cgpa;
    public Student(String name, int cgpa) {
        this.name=name;
        this.cgpa=cgpa;
    }
    @Override
    public int compareTo(Student other) {
        return (int)(this.getCgpa()-other.getCgpa());
    }
//    getters and setters
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name=name;
    }
    public int getCgpa() {
        return cgpa;
    }
    public void setCgpa(int cgpa) {
        this.cgpa=cgpa;
    }
    public class ComparatorComparable{
        public static void main(String[] args) {
            Student s1=new Student("xyz",9);
            Student s2=new Student("abc",10);
            int result=s1.compareTo(s2);
            if(result>0) {
                System.out.println(s1.getName()+" "+ "has higher cgpa");
            }
            else if(result<0) {
                System.out.println(s2.getName()+" "+ "has higher cgpa");
            }
            else {
                System.out.println("Both students have same cgpa");
            }
        }
    }
   
}
 




import java.util.*;
import java.lang.*;
import java.io.*;
class Student {​​​​​​
     String name;
     int rollno;
    public Student(int rollno,String name) {​​​​​​
        this.name=name;
        this.rollno=rollno;
    }​​​​​​
    public String toString() {​​​​​​
        return this.name + this.rollno;
    }​​​​​​
    }​​​​​​
//Class to Compare by Rollno
class SortByRollNo implements Comparator<Student>{​​​​​​
    public int compare(Student a,Student b) {​​​​​​
        return a.rollno-b.rollno;
    }​​​​​​
}​​​​​​
//Class to Compare By Name
class SortByName implements Comparator<Student>{​​​​​​
    public int compare(Student a, Student b) {​​​​​​
        return a.name.compareTo(b.name);
    }​​​​​​
}​​​​​​
public class ComparatorComparable{​​​​​​
        public static void main(String[] args) {​​​​​​
            ArrayList<Student> stu=new ArrayList<Student>();
            stu.add(new Student(1,"xyz"));
            stu.add(new Student(2,"abc"));
            stu.add(new Student(4,"pqr"));
            stu.add(new Student(3,"lmn"));
           
//            Sorting By name
            Collections.sort(stu,new SortByName());
            for(int i =0;i<stu.size();i++) {​​​​​​
                System.out.println(stu.get(i));
            }​​​​​​
           
        }​​​​​​
    }​​​​​​
   
}​​​​​​
 






    
import java.util.*;
import java.lang.*;
import java.io.*;
class Student {​​​​​​
     String name;
     int rollno;
    public Student(int rollno,String name) {​​​​​​
        this.name=name;
        this.rollno=rollno;
    }​​​​​​
    public String toString() {​​​​​​
        return this.name + this.rollno;
    }​​​​​​
    }​​​​​​
//Class to Compare by Rollno
class SortByRollNo implements Comparator<Student>{​​​​​​
    public int compare(Student a,Student b) {​​​​​​
        return a.rollno-b.rollno;
    }​​​​​​
}​​​​​​
//Class to Compare By Name
class SortByName implements Comparator<Student>{​​​​​​
    public int compare(Student a, Student b) {​​​​​​
        return a.name.compareTo(b.name);
    }​​​​​​
}​​​​​​




    
import java.util.ArrayList;
import java.util.Collections;


public class ComparatorComparable{​​​​​​
        public static void main(String[] args) {​​​​​​
            ArrayList<Student> stu=new ArrayList<Student>();
            stu.add(new Student(1,"xyz"));
            stu.add(new Student(2,"abc"));
            stu.add(new Student(4,"pqr"));
            stu.add(new Student(3,"lmn"));
            
//            Sorting By name
            Collections.sort(stu,new SortByName());
            for(int i =0;i<stu.size();i++) {​​​​​​
                System.out.println(stu.get(i));
            }​​​​​​
            
        }​​​​​​
}​​​​​​
    






public class ComparatorComparable
{
 public static void main(String[] args) 
{
 Gen<Integer> intObj=new Gen<>(7);
 System.out.println("Generic Class Returns" + " "+intObj.getData());
 // String
 Gen<String> strObj=new Gen<>("Generic Class in play"); 
System.out.println("Generic Class Returns" + " "+strObj.getData());
 }
 }
 //Create a Generic Class 
class Gen<T>
{
 // Filed of T
 type T data; 
// Constructor 
Gen (T data)
{
 this.data=data;
 }
 // method for the generic class
 public T getData() 
{
 return this.data; 
}
 }



public class ComparatorComparable
{
 public static void main(String[] args) 
{
 Gen genM=new Gen();
 genM.<String>genMethod("Gen Method");
 genM.<Integer>genMethod(7);
 }
 }
 //Create a Generic Method
 class Gen 
{
 // create a generic method
 public <T> void genMethod(T data)
 {
 System.out.println("Data Passed " + " "+data); 
}

